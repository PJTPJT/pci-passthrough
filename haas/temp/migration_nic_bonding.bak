
\figh{nic_bonding}{6}{NIC bonding}

In this section we describe the mechanism of migrating a guest
with direct NIC assignment. As shown in Figure 
\ref{fig:nic_bonding} the guest is configured with
virtio network device backed by the vhost driver and a
passthrough network interface card~\cite{zhai:2008}. Using
SR-IOV ~\cite{dong:2008} the physical NIC is presented as virtual NIC
through virtual functions. For the
purpose of simplicity, we assume that the guest has one
assigned network device. The prototype overcomes the challenge
of migrating NIC assigned guest by the following strategy. It
uses the Ethernet bonding driver to direct the network traffic
between the assigned and virtual NIC. The migration procedure
is divided into two parts. During regular operation of guest,
the assigned NIC is used for higher network bandwidth. Before
the migration, the host uses the bonding driver and shifts the
network traffic from the assigned NIC to the virtual NIC. The 
source host takes the control of the assigned NIC through 
hot unplug event of the assigned NIC and starts the migration. 
After the guest resumes at the destination, the destination host 
transfers the control back to the guest using hot
plug event of the assigned NIC and switches the network traffic 
from virtual NIC to assigned NIC.
%It announces the MAC address of assigned NIC by sending
%the gracious ARP packets to its local network before
%shifting the network traffic back to the
%assigned NIC.

% Insert the Guest's network interface configuration.
%
% Seamless VFIO hotplug at the destination. This is
% about the QEMU modification.
% Explain why hotplugging of NIC at the destination cause the
% network downtime?
% Three general steps:
%   - construct a QEMU software object that represent the
%     passthrough NIC. This is done during migration.
%   - realize the QEMU software object. This is done during
%     the migration.
%   - configure the QEMU software object, when the VM wakes
%     up. This is done when the VM wakes up.


% COMMENT
% - What are the components in play here? We have QEMU, VFIO
%   and guest. We can structure the design and flow of nic
%   bonding and migration with these comopnents in mind. We
%   also have a figure for the NIC bonding and migraiton. It
%   would help too. 
% - We may need to explain the reason why we choose to use the
%   active-backup mode among other different modes such as
%   round robin, transmission-load balancing or adaptive load
%   balancing.
% - The active backup mode only handles the outgoing traffic
%   instead of the incoming traffic. For the outgoing traffic,
%   the bonding driver deposits the outgoing packet requests
%   to the target outgoing ring buffer with the respective to
%   the assigned or virtual NIC. For the incoming traffic, it
%   uses the gratuitous ARP to redirect the incoming traffic.
% - We may need to explain the reason why we would like to
%   shift the network traffic before hot unplugging. What if
%   we do not shift the network traffic and hot unplug the
%   assigned NIC. In the other words, how does shifting the
%   traffic helps with the objective of exitless guest?
% - We may want to describe what the "hot" plug/unplug mean
%   conceptually. It is a bit like plug-n-play device without
%   rebooting the machine. Currently, QEMU supports the hot
%   plug/unplug capabilities.
% - We may need to first highlight what was the problem we
%   have encountered when hot plugging the assigned device at
%   the destination, so the QEMU modification would make
%   sense. In the other words, the long time we spend inside
%   the main event loop on adding a I/O device, the longer it
%   takes to pause the guest. This is the QEMU implementation
%   restriction.Then, we would explain the QEMU modification
%   which helps to resolve the network service downtime during
%   the unmodified hotplugging event. Probably just need to
%   restructure the paragraphs a bit.
% - What would be the benefit to hide the first two steps of
%   hot plug during the migration? Or will it introduce the
%   addition migration downtime at all? If we do the first two
%   steps of configuration, the effects are taken at the
%   destination. It does not really seem to affect the QEMU
%   migrating the memory pages and CPU context from the source
%   to the destination.
% - We may want to mention when would be a good time to hot
%   unplug the assigned NIC, which is still performing the
%   network I/O. In the other words, what is the algorithm to
%   determine if it is a right time to hot unplug the NIC
%   device with the minimal network service downtime.
% - We may want to explain the concept of hot plug and unplug.
%   For the hot plug operation, the host transfers the NIC
%   ownership to the guest. For the hot unplug operation, the
%   host re-acquires the assigned NIC back. It signifies the
%   host still has the high order of device controls than the
%   guest. The guest is permitted to own the device and
%   achieves the baremetal network I/O performance.

Linux provides bonding driver to present multiple network
interfaces into a single logical interface. The modes of 
bonding driver define the behavior of the bonded interfaces.
To maintain higher network performance during regular
operation of guest, we configure the bonding driver in 
active-backup mode where the assigned NIC is chosen as the 
active interface and the virtual NIC as a backup-slave 
interface. In active-backup mode only one of the interfaces 
is active at any time. When the active interface fails, 
one of the slave interfaces becomes active. The bonding 
driver always takes the MAC of the active interface. On 
failure of the active interface, the bonding driver 
takes the MAC address of the next to be slave interface. 
The change in MAC address is notified by broadcasting 
ARP packets to avoid the network packets loss in guest. 
Before the migration is initiated, on hot unplug command, the 
outgoing network traffic is redirected to the virtual NIC 
interface by the bonding driver and the incoming traffic
is shifted to the virtual NIC by broadcasting ARP packets. 
Once the assigned NIC is hot unplugged, QEMU issues 
migrate command. After the migration is completed, 
once the guest resumes on the destination, the NIC 
device is hot plugged.

We observed that on hot plug event of NIC device on 
the destination host, the network service in guest drops 
until for 0.3seconds. Further, we investigate the reason for
the network packet loss in the guest. The hot plug mechanism 
of assigned NIC consists of the following three steps.
First, QEMU prepares a software object that represents 
the passthrough NIC. It then realizes the QEMU
software object by getting a copy of configuarion space from
the NIC device. Finally, it resets the software NIC object and
setup the BAR and interrupt forwarding. The first and last
step happen in QEMU main event loop during which the guest
remains paused. As a result, the guest experiences downtime
during hot plug operation. In \na, to mitigate the downtime
due to hot plug operation on the destination host, the first
two steps are executed during migration. During the first 
phase of pre-copy live migration ~\cite{}, 
all the memory pages are transferred to the 
destination over the network. The dirty 
memory pages are then transferred in multiple iterative rounds.
The VCPU and I/O state of guest are transferred in the final
phase to resume the guest on destination. Step one and two 
are executed on the destination host during migration. 
Consequently, the network service in guest does not get 
affected as it runs on the source host. QEMU allows 
to setup and realize the software object during migration. 
However, the BAR and interrupts can be setup only 
after resuming the guest. Hence, we eliminate the downtime 
caused during the setup of software NIC object phase.
